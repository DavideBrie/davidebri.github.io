{
    "version": "https://jsonfeed.org/version/1",
    "title": "P0WEX",
    "home_page_url": "/",
    "feed_url": "/feed.json",
    "description": "just a personal blog",
    "icon": "/apple-touch-icon.png",
    "favicon": "/favicon.ico",
    "expired": false,
    
"items": [
    
        {
            "id": "/2021/10/17/SMB-protocol-101.html",
            "title": "SMB protocol 101",
            "summary": "A brief introduction to smb prtocol.",
            "content_text": "I discovered this protocol by doing a HTB’s room which involved a Windows-based machine, and it was my very first time hacking that OS.IntroductionAlso known as Server Message Block, is a client-server protocol, originally created by IBM than updated by Microsoft, that allow access to shared file, printers and ports over the network. We mostly see SMB services running on Windows machines. User side, SMB authentication requires a username and password to allow access to the server. It is controlled by the system administrator, who can add or block users and keep tabs on who is allowed in. Meanwhile at share-level, users have to enter a one-time password to access the shared file or server, but no username is required.Different VersionThere are different variations of this protocol:      SMBv1, released by IBM and modified by Microsoft, this version is also known because the ransomware Wannacry used a vulnerability of this version to spread itself over the network.        SMBv2, performance boosted - debuted in Windows Vista        SMBv3, security increased via end-to-end encryption - introduced in Windows 7        SMBv3.02, possibility to completely disable SMBv1- came with Windows 8.1        SMBv3.1.1, introduced AES-128 encryption, MITM protection and session verification - released in Windows 10  Always check your SMB’s version and update it, if possible.How to use SMBFisrt of all we should know that it operate via TCP on port 445. If we are operating from a Linux machine, the command to see the shares is :smbclient -L {HOSTNAME}This will output something like this:Server time is Sat Aug 10 15:58:27 1996Timezone is UTC+10.0Password: Domain=[WORKGROUP] OS=[Windows NT 3.51] Server=[NT LAN Manager 3.51]Server=[ZIMMERMAN] User=[] Workgroup=[WORKGROUP] Domain=[]        Sharename      Type      Comment        ---------      ----      -------        ADMIN$         Disk      Remote Admin        public         Disk      Public         C$             Disk      Default share        IPC$           IPC       Remote IPC        OReilly        Printer   OReilly        print$         Disk      Printer DriversThis machine has a browse list:        Server               Comment        ---------            -------        HOPPER               Samba 1.9.15p8        KERNIGAN             Samba 1.9.15p8        LOVELACE             Samba 1.9.15p8        RITCHIE              Samba 1.9.15p8        ZIMMERMAN            If you want to reach the public directory on the machine we have to type:smbclient \\\\\\\\{HOSTNAME}\\\\publicIt may ask you for a password.Once we are connected we can do a bunch of operation, type smb: \\&gt; help for more info.",
            "content_html": "<p>I discovered this protocol by doing a <a href=\"https://hackthebox.eu\">HTB</a>’s room which involved a Windows-based machine, and it was my very first time hacking that OS.</p><h1 id=\"introduction\">Introduction</h1><p>Also known as <strong>Server Message Block</strong>, is a client-server protocol, originally created by IBM than updated by Microsoft, that allow access to shared file, printers and ports over the network. <br />We mostly see SMB services running on Windows machines. <br />User side, SMB authentication requires a username and password to allow access to the server. It is controlled by the system administrator, who can add or block users and keep tabs on who is allowed in. <br />Meanwhile at share-level, users have to enter a one-time password to access the shared file or server, but no username is required.</p><h2 id=\"different-version\">Different Version</h2><p>There are different variations of this protocol:</p><ul>  <li>    <p>SMBv1, released by IBM and modified by Microsoft, this version is also known because the ransomware <a href=\"https://en.wikipedia.org/wiki/WannaCry_ransomware_attack\">Wannacry</a> used a vulnerability of this version to spread itself over the network.</p>  </li>  <li>    <p>SMBv2, performance boosted - debuted in Windows Vista</p>  </li>  <li>    <p>SMBv3, security increased via end-to-end encryption - introduced in Windows 7</p>  </li>  <li>    <p>SMBv3.02, possibility to completely disable SMBv1- came with Windows 8.1</p>  </li>  <li>    <p>SMBv3.1.1, introduced AES-128 encryption, MITM protection and session verification - released in Windows 10</p>  </li></ul><p>Always check your SMB’s version and update it, if possible.</p><h3 id=\"how-to-use-smb\">How to use SMB</h3><p>Fisrt of all we should know that it operate via TCP on port 445. If we are operating from a Linux machine, the command to see the shares is :</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>smbclient <span class=\"nt\">-L</span> <span class=\"o\">{</span>HOSTNAME<span class=\"o\">}</span></code></pre></div></div><p>This will output something like this:</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Server <span class=\"nb\">time </span>is Sat Aug 10 15:58:27 1996Timezone is UTC+10.0Password: <span class=\"nv\">Domain</span><span class=\"o\">=[</span>WORKGROUP] <span class=\"nv\">OS</span><span class=\"o\">=[</span>Windows NT 3.51] <span class=\"nv\">Server</span><span class=\"o\">=[</span>NT LAN Manager 3.51]<span class=\"nv\">Server</span><span class=\"o\">=[</span>ZIMMERMAN] <span class=\"nv\">User</span><span class=\"o\">=[]</span> <span class=\"nv\">Workgroup</span><span class=\"o\">=[</span>WORKGROUP] <span class=\"nv\">Domain</span><span class=\"o\">=[]</span>        Sharename      Type      Comment        <span class=\"nt\">---------</span>      <span class=\"nt\">----</span>      <span class=\"nt\">-------</span>        ADMIN<span class=\"nv\">$ </span>        Disk      Remote Admin        public         Disk      Public         C<span class=\"nv\">$ </span>            Disk      Default share        IPC<span class=\"nv\">$ </span>          IPC       Remote IPC        OReilly        Printer   OReilly        print<span class=\"nv\">$ </span>        Disk      Printer DriversThis machine has a browse list:        Server               Comment        <span class=\"nt\">---------</span>            <span class=\"nt\">-------</span>        HOPPER               Samba 1.9.15p8        KERNIGAN             Samba 1.9.15p8        LOVELACE             Samba 1.9.15p8        RITCHIE              Samba 1.9.15p8        ZIMMERMAN            </code></pre></div></div><p>If you want to reach the public directory on the machine we have to type:</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>smbclient <span class=\"se\">\\\\\\\\</span><span class=\"o\">{</span>HOSTNAME<span class=\"o\">}</span><span class=\"se\">\\\\</span>public</code></pre></div></div><p>It may ask you for a password.</p><p>Once we are connected we can do a bunch of operation, type <code class=\"language-plaintext highlighter-rouge\">smb: \\&gt; help</code> for more info.</p>",
            "url": "/2021/10/17/SMB-protocol-101.html",
            
            
            
            "tags": ["security","networking"],
            
            "date_published": "2021-10-17T00:00:00+00:00",
            "date_modified": "2021-10-17T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2021/10/08/NMAP.html",
            "title": "Nmap",
            "summary": "A brief introduction to nmap tool.",
            "content_text": "nmap is a pentesting tool executed via terminal using nmap command.It’s usefull for port scanning, that means we know if that computer is hosting some Website or open to SSH etc. A port is necessary for making request on a network.Every computer has a total of 65535 available ports; however, many of these are registered as standard ports (1024).So nmap does a check on every port and depending on how the port responds, it can be determined as being open, closed, or filtered (usually by a firewall).Scan typesWhen port scanning with Nmap, there are three basic scan types. These are:  TCP Connect Scans (-sT)This perform a three-way handshake with the ports specified in the command. Depends on what we get back, we can figure it out how’s the port’s status. If we get back a RST flag set -&gt; the port is close; If we get back a SYN/ACK flag set -&gt; the port is open; What if we got nothing back? This mean that the port is hidden behind a firewall and it will be marked as filtered;  SYN Scans (-sS)Also known as stealth scan, is used to scan the TCP port-range.Keep in mind that this scan require sudo permission, because we need to create raw packets not the full TCP handshake.  UDP Scans (-sU)When a packet is sent to an open UDP port, there should be no response. When this happens, nmap refers to the port as being open or filteredAdditionally there are several less common port scan types like:  TCP Null Scans (-sN)Send TCP request is sent with no flags set at all, and if it’s closed it should send back the RST flag.  TCP FIN Scans (-sF)The request is sent with only the FIN flag. Once again, nmap expects a RST if the port is closed.  TCP Xmas Scans (-sX)Send a malformed TCP packet, with only PSH, URG and FIN sets and expects a RST response for closed ports.Nmap Scripting Engine - NSEThis scripts, written in LUA, expands the nmap capability.The standard scripts, stored at /usr/share/nmap/scripts,  are divded by categorys such as: safe, intrusive, vuln, exploit, auth, brute and many more.It’s possible to use this scripts typing:nmap &lt;IP_ADDRESS&gt; -sT -sS --script=&lt;CATEGORY&gt;and, if needed, it possible to parse some arguments to them with --script-args followed by the arguments.",
            "content_html": "<p>nmap is a pentesting tool executed via terminal using <code class=\"language-plaintext highlighter-rouge\">nmap</code> command.</p><p>It’s usefull for <strong>port scanning</strong>, that means we know if that computer is hosting some Website or open to SSH etc. A port is necessary for making request on a network.</p><p>Every computer has a total of 65535 available ports; however, many of these are registered as standard ports (1024).</p><p>So nmap does a check on every port and depending on how the port responds, it can be determined as being open, closed, or filtered (usually by a firewall).</p><h1 id=\"scan-types\">Scan types</h1><p>When port scanning with Nmap, there are three basic scan types. These are:</p><ol>  <li><strong>TCP Connect Scans (-sT)</strong></li></ol><p>This perform a three-way handshake with the ports specified in the command. Depends on what we get back, we can figure it out how’s the port’s status. <br />If we get back a <strong>RST</strong> flag set -&gt; the port is <strong>close</strong>; <br />If we get back a <strong>SYN/ACK</strong> flag set -&gt; the port is <strong>open</strong>; <br />What if we got nothing back? This mean that the port is hidden behind a firewall and it will be marked as <strong>filtered</strong>;</p><ol>  <li><strong>SYN Scans (-sS)</strong></li></ol><p>Also known as <em>stealth</em> scan, is used to scan the TCP port-range.Keep in mind that this scan require sudo permission, because we need to create raw packets not the full TCP handshake.</p><ol>  <li><strong>UDP Scans (-sU)</strong></li></ol><p>When a packet is sent to an open <strong>UDP</strong> port, there should be no response. When this happens, nmap refers to the port as being <strong>open</strong> or <strong>filtered</strong></p><h3 id=\"additionally-there-are-several-less-common-port-scan-types-like\">Additionally there are several less common port scan types like:</h3><ol>  <li><strong>TCP Null Scans (-sN)</strong></li></ol><p>Send TCP request is sent with no flags set at all, and if it’s closed it should send back the <strong>RST</strong> flag.</p><ol>  <li><strong>TCP FIN Scans (-sF)</strong></li></ol><p>The request is sent with only the <strong>FIN</strong> flag. Once again, nmap expects a <strong>RST</strong> if the port is closed.</p><ol>  <li><strong>TCP Xmas Scans (-sX)</strong></li></ol><p>Send a malformed TCP packet, with only <strong>PSH</strong>, <strong>URG</strong> and <strong>FIN</strong> sets and expects a <strong>RST</strong> response for closed ports.</p><h1 id=\"nmap-scripting-engine---nse\">Nmap Scripting Engine - NSE</h1><p>This scripts, written in LUA, expands the nmap capability.The standard scripts, stored at <code class=\"language-plaintext highlighter-rouge\">/usr/share/nmap/scripts</code>,  are divded by categorys such as: <strong>safe</strong>, <strong>intrusive</strong>, <strong>vuln</strong>, <strong>exploit</strong>, <strong>auth</strong>, <strong>brute</strong> and <em><a href=\"https://nmap.org/book/nse-usage.html\">many more</a></em>.</p><p>It’s possible to use this scripts typing:</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>nmap &lt;IP_ADDRESS&gt; <span class=\"nt\">-sT</span> <span class=\"nt\">-sS</span> <span class=\"nt\">--script</span><span class=\"o\">=</span>&lt;CATEGORY&gt;</code></pre></div></div><p>and, if needed, it possible to parse some arguments to them with <code class=\"language-plaintext highlighter-rouge\">--script-args</code> followed by the arguments.</p>",
            "url": "/2021/10/08/NMAP.html",
            
            
            
            "tags": ["security","networking"],
            
            "date_published": "2021-10-08T00:00:00+00:00",
            "date_modified": "2021-10-08T00:00:00+00:00",
            
                "author": 
                ""
                
            
        },
    
        {
            "id": "/2021/08/28/2-Factor-Authentication-explained.html",
            "title": "2 Factor Authenticator explained",
            "summary": "What's a 2FA and how it works.",
            "content_text": "Everybody nowadays experienced at least once, after inserting the login credentials to enter a website, the other “tedious” step of writing a temporary code, sent via text messages as token or generated via an authentication app (2FA).This last step can save your accounts to be hacked. Because it’s a One-Time 6 digit code and expires in less than a minute, can offer a second layer of security.Thus even if someone knows your login credentials or stole them, they still not be able to enter if they don’t have access to your 2FA app.This, in short, it’s how 2 Factor Authentication works.Why it’s called 2-Factor Authentication ❔To identify yourself into a system, you could be asked 3 main things:  Something you know.  Something you are.  Something you have.As can you imagine a two factor, involve 2 of these 3 things. An example, similar to 2FA, that we use in our everyday life, is when we go to an ATM to withdraw some money, we have a bank card and we know the pin of it. That are 2 factor.What about the something we are? We’re talking about biometrics, for example, fingerprint or face recognition, a great method, but still not perfect.How a 2FA code it’s made ⚙️If you’re not familiar, here’s a screenshot of the Google Auth app.As you can see, there is a code for each account and there is a little timer that lasts 30 seconds, at the end of it, it will generate a new one.This it’s basically made by an algorithm that randomly outputs a 6 digit code. This can be implemented in different ways, for example, they could be based on TOTP a Time-Based One-time Password.You may know wondering, since it’s random, how the site we are trying to log in is capable of recognizing the right 2FA code.When you enable this layer of security, the site will give you a QR code or a string, that we have to input in the app so it can start generating codes, for that site.That string is a secret key, assigned to your account, that it’s combined, in case the app used a TOTP-based algorithm, with a timestamp to generate a new code every 30 seconds.Can 2FA be reverse engeneered? 👨‍💻No. If we use a well-known third-party software and someone gets our code, they can’t use it to predict the new ones. The only method they have it’s to get access to the app that we use to generate codes.2FA Third-party apps - Wich is the best? 💭As always there are different options to choose from, but by my experience, I can tell that when you’re dealing with multiple accounts, my advice is Authy since having a lot of feature like:  Password protection  Push notifications  Encrypted Backups  And many more…And the migration from Google Authenticator was really easy.",
            "content_html": "<p>Everybody nowadays experienced at least once, after inserting the login credentials to enter a website, the other “tedious” step of writing a temporary code, sent via text messages as token or generated via an authentication app (2FA).</p><p>This last step can save your accounts to be hacked. Because it’s a One-Time 6 digit code and expires in less than a minute, can offer a second layer of security.</p><p>Thus even if someone knows your login credentials or stole them, they still not be able to enter if they don’t have access to your 2FA app.</p><p>This, in short, it’s how 2 Factor Authentication works.</p><h1 id=\"why-its-called-2-factor-authentication-\">Why it’s called 2-Factor Authentication ❔</h1><p>To identify yourself into a system, you could be asked 3 main things:</p><ol>  <li>Something you <strong>know</strong>.</li>  <li>Something you <strong>are</strong>.</li>  <li>Something you <strong>have</strong>.</li></ol><p>As can you imagine a two factor, involve 2 of these 3 things. An example, similar to 2FA, that we use in our everyday life, is when we go to an ATM to withdraw some money, we <strong>have</strong> a bank card and we <strong>know</strong> the pin of it. That are 2 factor.</p><p>What about the something we <strong>are</strong>? <br />We’re talking about biometrics, for example, fingerprint or face recognition, a great method, but still not perfect.</p><h1 id=\"how-a-2fa-code-its-made-️\">How a 2FA code it’s made ⚙️</h1><p>If you’re not familiar, here’s a screenshot of the Google Auth app.</p><p><img src=\"https://play-lh.googleusercontent.com/-15RNeDrob7WSybEtSGTuGu1gj_-RLP_ywlBl8GwoONBKCURKylarxjt8NAT5QKRK00\" alt=\"\" /></p><p>As you can see, there is a code for each account and there is a little timer that lasts 30 seconds, at the end of it, it will generate a new one.</p><p>This it’s basically made by an algorithm that randomly outputs a 6 digit code. This can be implemented in different ways, for example, they could be based on TOTP a Time-Based One-time Password.</p><p>You may know wondering, since it’s random, how the site we are trying to log in is capable of recognizing the right 2FA code.</p><p>When you enable this layer of security, the site will give you a QR code or a string, that we have to input in the app so it can start generating codes, for that site.</p><p>That string is a secret key, assigned to your account, that it’s combined, in case the app used a TOTP-based algorithm, with a timestamp to generate a new code every 30 seconds.</p><h1 id=\"can-2fa-be-reverse-engeneered-\">Can 2FA be reverse engeneered? 👨‍💻</h1><p>No. If we use a well-known third-party software and someone gets our code, they can’t use it to predict the new ones. The only method they have it’s to get access to the app that we use to generate codes.</p><h1 id=\"2fa-third-party-apps---wich-is-the-best-\">2FA Third-party apps - Wich is the best? 💭</h1><p>As always there are different options to choose from, but by my experience, I can tell that when you’re dealing with multiple accounts, my advice is <a href=\"https://authy.com/\">Authy</a> since having a lot of feature like:</p><ul>  <li>Password protection</li>  <li>Push notifications</li>  <li>Encrypted <strong>Backups</strong></li>  <li>And many more…</li></ul><p>And the migration from Google Authenticator was really easy.</p>",
            "url": "/2021/08/28/2-Factor-Authentication-explained.html",
            
            
            
            
            
            "date_published": "2021-08-28T00:00:00+00:00",
            "date_modified": "2021-08-28T00:00:00+00:00",
            
                "author": 
                ""
                
            
        }
    
    ]
}